// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskMedicin.Data;

#nullable disable

namespace TaskMedicin.Migrations
{
    [DbContext(typeof(TaskDbContext))]
    [Migration("20231104090846_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskMedicin.Models.Appointment", b =>
                {
                    b.Property<int>("AId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("contactno")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("dId")
                        .HasColumnType("integer");

                    b.Property<int>("doctorsdId")
                        .HasColumnType("integer");

                    b.Property<string>("problemname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("doctorsdId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("TaskMedicin.Models.Catg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("cName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("TaskMedicin.Models.Customer", b =>
                {
                    b.Property<int>("CId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CId"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Problem")
                        .HasColumnType("text");

                    b.Property<string>("doctorname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TaskMedicin.Models.Doctors", b =>
                {
                    b.Property<int>("dId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("dId"));

                    b.Property<int>("categoryId")
                        .HasColumnType("integer");

                    b.Property<string>("dName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dQualification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dSpecification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("dId");

                    b.HasIndex("categoryId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("TaskMedicin.Models.Medicin", b =>
                {
                    b.Property<int?>("MedicinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("MedicinId"));

                    b.Property<string>("MedicinName")
                        .HasColumnType("text");

                    b.Property<string>("MedicinPrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MedicinId");

                    b.ToTable("Medicins");
                });

            modelBuilder.Entity("TaskMedicin.Models.User", b =>
                {
                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskMedicin.Models.Appointment", b =>
                {
                    b.HasOne("TaskMedicin.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskMedicin.Models.Doctors", "doctors")
                        .WithMany()
                        .HasForeignKey("doctorsdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("doctors");
                });

            modelBuilder.Entity("TaskMedicin.Models.Doctors", b =>
                {
                    b.HasOne("TaskMedicin.Models.Catg", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });
#pragma warning restore 612, 618
        }
    }
}
